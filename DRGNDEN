#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define M 1000000007
#define ll long long
#define pb push_back
#define fo(i,N) for(int i = 0 ; i < N ; i++)
#define foo(i,x,N) for (int i = x; i < N ; i++)
#define fill(a,val) memset(a,val,sizeof(a))
#define fastio()  ios_base::sync_with_stdio(false); cin.tie(NULL);
#define endl '\n'
#define ff first
#define ss second
#define MAX 1234567
#define pii pair<int,int>
#define pll pair<ll,ll>
#define all(a) a.begin(),a.end()
#define setbits(x) __builtin_popcountll(x)
#define zrobits(x) __builtin_ctzll(x)
#define inf 1e18
#define vi vector<int>
#define pii pair<int,int>
#define pqb priority_queue<pair<pair<ll,ll>,int>>
#define pqs priority_queue<pair<ll,ll>,vector <pair<ll,ll>>,greater<pair<ll,ll>>>
/// find_by_order() -- returns the iterator to the kth largest
/// order_of_key() -- number of elements strictly less than k
ll mpow(ll x, ll y, ll m) {if ( y == 0) return 1;  if ( y & 1) return (x % m * mpow(x, y - 1, m) % m) % m; else  {ll temp = mpow(x, y / 2, m) % m; return (temp * temp) % m;}}
ll power(ll x, ll y) {if ( y == 0) return 1;  if ( y & 1) return (x * power(x, y - 1)); else  {ll temp = power(x, y / 2); return (temp * temp);}}
typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag,
        tree_order_statistics_node_update>
        pbds;
void wandan23() {
    fastio()
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}


void buildST(ll arr[], int s, int e, ll* tree, int index)
{
    if ( s == e)
    {
        tree[index] = arr[s];
        return;
    }
    int mid = (s + e) / 2;
    buildST(arr, s, mid, tree, 2 * index);
    buildST(arr, mid + 1, e, tree, 2 * index + 1);
    tree[index] = max(tree[2 * index], tree[2 * index + 1]);
}


int query(ll *tree, int qs, int qe, int s, int e, int index)
{
    if ( s >= qs && e <= qe)
        return tree[index];

    if ( e < qs || s > qe)
        return INT_MIN;

    int mid = (s + e) / 2;

    int t1 = query(tree, qs, qe, s, mid, 2 * index);
    int t2 = query(tree, qs, qe, mid + 1, e, 2 * index + 1);
    return max(t1, t2);
}

ll bitl[200005] = {0};
ll bitr[200005] = {0};

void update(ll *bit, int n, int idx, ll val)
{
    for (; idx <= n; idx += (idx & (-idx)))
        bit[idx] += val;
}

ll queryb(ll *bit, int idx)
{   ll ans = 0;
    for (; idx > 0; idx -= (idx & -idx))
    {
        ans += bit[idx];
    }
    return ans;
}



int main() {

    int n, q;
    cin >> n >> q;
    ll arr[n + 1];
    foo(i, 1, n + 1)
    {
        cin >> arr[i];
    }

    ll *tree = new ll[4 * n + 1];
    buildST(arr, 1, n, tree, 1);

    ll val[n + 1];

    foo(i, 1, n + 1)
    cin >> val[i];


    int left[n + 1];
    int right[n + 1];
    ll lsum[n + 1] = {0};
    ll rsum[n + 1]  = {0};

    stack <int> s;

    s.push(1);
    foo(i, 2, n + 1)
    {
        while (!s.empty() && arr[i] >= arr[s.top()])
        {
            left[s.top()] = i;
            s.pop();
        }
        s.push(i);
    }
    while (!s.empty())
    {
        left[s.top()] = -1;
        s.pop();
    }

    s.push(n);

    for (int i = n - 1; i >= 1; i--)
    {
        while (!s.empty() && arr[i] >= arr[s.top()])
        {
            right[s.top()] = i;
            s.pop();
        }
        s.push(i);
    }
    while (!s.empty())
    {
        right[s.top()] = -1;
        s.pop();
    }

    foo(i, 1, n + 1)
    {

        int temp = right[i];
        while ( temp != -1 && arr[temp] == arr[i])
        {
            temp = right[temp];

        }
        if ( temp  == -1)
            rsum[i] = val[i];
        else
            rsum[i] = val[i] + rsum[temp];


    }
    for (int i = n; i > 0 ; i--)
    {
        int temp = left[i];
        while ( temp != -1 && arr[temp] == arr[i])
        {
            temp = left[temp];

        }
        if ( temp == -1)
            lsum[i] = val[i];
        else
            lsum[i] = val[i] + lsum[temp];

    }

    foo(i, 1, n + 1)
    {
        update(bitl, n, i, lsum[i] - lsum[i - 1]);
        update(bitr, n, i, rsum[i] - rsum[i - 1]);
    }





    int a, b, c;

    while (q--)
    {
        cin >> a >> b >> c;

        if ( a == 1)
        {
            ll cur = c - val[b];
            val[b] = c;

            if (  left[b] == -1)
            {
                update(bitr, n, b, cur);


            }
            else
            {
                update(bitr, n, b, cur);
                update(bitr, n, left[b], -cur);
            }

            if ( right[b] == -1)
            {   update(bitl, n, 1, cur);
                update(bitl, n, b + 1, -cur);
            }

            else
            {
                update(bitl, n, right[b] + 1, cur);
                update(bitl, n, b + 1, -cur);

            }


        }
        else
        {
            ll ans = 0;
            if ( b == c)
            {
                cout << val[b] << endl;
                continue;
            }
            ll temp;
            if ( b < c)
                temp = query(tree, b + 1 , c, 1, n, 1);
            else
                temp = query(tree, c, b - 1, 1, n, 1);


            if ( temp >= arr[b])
            {

                cout << -1 << endl;
                continue;
            }
            else if ( c < b)
            {
                cout << queryb(bitl, c) - queryb(bitl, b)  + val[b] << endl;

            }
            else
            {

                cout << queryb(bitr, c) - queryb(bitr, b) + val[b]   << endl;
            }


        }
    }










}











